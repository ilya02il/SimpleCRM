// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleCRM.DAL.Implementations;

namespace SimpleCRM.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleCRM.DAL.Entities.StateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new { Id = 1, IsActive = false, Status = "Assigned" },
                        new { Id = 2, IsActive = false, Status = "InProgress" },
                        new { Id = 3, IsActive = false, Status = "Paused" },
                        new { Id = 4, IsActive = false, Status = "Finished" }
                    );
                });

            modelBuilder.Entity("SimpleCRM.DAL.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompletionDate");

                    b.Property<string>("Description");

                    b.Property<TimeSpan>("ExecutionTime");

                    b.Property<string>("Executors");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentTaskId");

                    b.Property<double>("PlannedIntensity");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("StateId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new { Id = 1, CompletionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ExecutionTime = new TimeSpan(0, 0, 0, 0, 0), IsActive = false, PlannedIntensity = 0.0, RegistrationDate = new DateTime(2021, 7, 4, 22, 38, 27, 627, DateTimeKind.Local), StateId = 1 },
                        new { Id = 2, CompletionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ExecutionTime = new TimeSpan(0, 0, 0, 0, 0), IsActive = false, PlannedIntensity = 0.0, RegistrationDate = new DateTime(2021, 7, 4, 22, 38, 27, 627, DateTimeKind.Local), StateId = 1 },
                        new { Id = 3, CompletionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ExecutionTime = new TimeSpan(0, 0, 0, 0, 0), IsActive = false, PlannedIntensity = 0.0, RegistrationDate = new DateTime(2021, 7, 4, 22, 38, 27, 627, DateTimeKind.Local), StateId = 1 }
                    );
                });

            modelBuilder.Entity("SimpleCRM.DAL.Entities.TaskEntity", b =>
                {
                    b.HasOne("SimpleCRM.DAL.Entities.TaskEntity", "ParentTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimpleCRM.DAL.Entities.StateEntity", "State")
                        .WithMany("Tasks")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
